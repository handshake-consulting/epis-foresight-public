NEVER edit the database. NEVER edit Supabase.

# EPI-Foresight Public

A Next.js application for collaborative knowledge sharing and content generation, featuring an AI-powered chat interface and an article creation system.

## Overview

Leaders Make the Future: Collaborative Platform
A public collaborative platform for exploring and expanding on "Leaders Make the Future" concepts through an interactive book-like interface. This platform allows anyone to generate new content, contribute ideas, and build upon existing material—creating a living, evolving document based on the original book.
![Platform Screenshot Placeholder]
Features
Book-Like Experience

Content presented as pages within a book rather than traditional chat responses
Clean, professional layout inspired by modern digital reading platforms

Content Generation

Generate comprehensive articles (300+ words) on any topic related to "Leaders Make the Future"
Visual feedback during the 15-30 second generation process
Each generation creates a full "page" of content

Public Collaboration

All generated content is publicly visible to all users
No user accounts or management required
Anyone can contribute to the growing collection of pages

Version History

Each page maintains its version history
Navigate between different versions using previous/next controls
Compare how content evolves through successive iterations

How It Works
Creating New Pages

Enter a primary topic in the main input field at the top of the interface
The system will generate a comprehensive page on the requested topic

Refining Content

To refine an existing page, use the input field at the bottom of the page
Describe how you'd like to improve or modify the content
The system generates a new version while preserving the original
Navigate between versions using the version history controls

Starting New Topics

Use the "Add a New Page" button to start a completely new topic
Previous topics remain accessible through the navigation panel

Visual Design
The platform features a clean, book-inspired interface with:

Elegant typography and spacing for optimal readability
Subtle page transitions to enhance the book-like experience
Responsive design that works across desktop and mobile devices
Collapsible navigation panel for distraction-free reading

Inspiration
The design and functionality draw inspiration from:

Readest for the aesthetic and reading experience

This collaborative platform reimagines how we interact with and expand upon published content, creating a space where the original ideas from "Leaders Make the Future" can grow through community contribution.

## Technology Stack

- **Frontend**: Next.js 15 with React 19, TypeScript, Tailwind CSS
- **Authentication**: Firebase Authentication
- **Database**: Supabase (PostgreSQL)
- **AI Integration**: External API service (via chat_stream endpoint) for content generation; Anthropic's Claude Haiku used directly only for generating chat titles
- **Styling**: Tailwind CSS with custom components

## Project Structure

```
├── src/
│   ├── app/                 # Next.js app router pages
│   │   ├── article/         # Article creation and viewing
│   │   ├── chat/            # Chat interface
│   │   ├── home/            # Home page
│   │   ├── login/           # Authentication pages
│   │   └── api/             # API routes
│   ├── components/          # Reusable UI components
│   │   ├── article/         # Article-specific components
│   │   ├── chat/            # Chat-specific components
│   │   └── ui/              # Generic UI components
│   ├── utils/               # Utility functions
│   │   ├── firebase/        # Firebase configuration
│   │   └── supabase/        # Supabase client and helpers
│   ├── hook/                # Custom React hooks
│   └── middleware.ts        # Next.js middleware for routing
├── setup.sql                # Database schema for users
├── setup_chat.sql           # Database schema for chat functionality
└── setup_article.sql        # Database schema for article functionality
```

## Key Features

### Authentication System

The application uses Firebase for authentication with auto-login functionality provided by the `AutoLoginProvider` component. It maintains user sessions and synchronizes user data with Supabase.

### Chat Interface

The chat functionality allows users to:
- Create new chat sessions
- Send messages to an AI assistant (via external API service)
- View chat history
- Get real-time responses

### Article System

The article system enables users to:
- Create and edit educational articles
- Maintain version history
- Organize content by topics
- Share knowledge in an e-book format

### Database Schema

The application uses a PostgreSQL database (via Supabase) with the following main tables:
- `users`: Stores user information
- `chat_sessions`: Tracks chat and article sessions
- `chat_messages`: Stores messages and article content

## Getting Started

### Prerequisites

- Node.js (latest LTS version)
- npm or yarn
- Firebase account
- Supabase account
- Anthropic API key

### Installation

1. Clone the repository:
```bash
git clone https://github.com/yourusername/epis-foresight-public.git
cd epis-foresight-public
```

2. Install dependencies:
```bash
npm install
# or
yarn install
```

3. Set up environment variables:
Create a `.env.local` file with the following variables:
```
# Firebase
FIREBASE_API_KEY=your_firebase_api_key
FIREBASE_AUTH_DOMAIN=your_firebase_auth_domain
FIREBASE_PROJECT_ID=your_firebase_project_id
FIREBASE_STORAGE_BUCKET=your_firebase_storage_bucket
FIREBASE_MESSAGING_SENDER_ID=your_firebase_messaging_sender_id
FIREBASE_APP_ID=your_firebase_app_id

# Supabase
NEXT_PUBLIC_SUPABASE_URL=your_supabase_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key

# Anthropic
ANTHROPIC_API_KEY=your_anthropic_api_key

# External API
NEXT_PUBLIC_API_URL=your_external_api_url
NEXT_PUBLIC_CLIENT_ID=your_client_id
NEXT_PUBLIC_GRAPH_ID=your_graph_id
```

4. Run the development server:
```bash
npm run dev
# or
yarn dev
```

5. Open [http://localhost:3000](http://localhost:3000) in your browser.

## Database Setup

To set up the database schema, run the SQL scripts in the following order:
1. `setup.sql` - Creates the users table
2. `setup_chat.sql` - Sets up chat functionality
3. `setup_article.sql` - Adds article functionality

These can be executed directly in the Supabase SQL editor.

## Deployment

The project is configured for deployment on Vercel. Simply connect your GitHub repository to Vercel and deploy.

```
npm run build
```
